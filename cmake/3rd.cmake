get_filename_component(THIRDPARTY_PATH ${CMAKE_BINARY_DIR} ABSOLUTE)
#message("THIRDPARTY_PATH:${THIRDPARTY_PATH}")

if(WIN32)
  set(WINDOWS_PLATFORM win32)
  if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(WINDOWS_PLATFORM win64)
  endif()
endif()

macro(FIND_LIBS_NO_ROOT libs path)
  foreach(arg ${ARGN})
    unset(_mylib CACHE)
    find_library(_mylib ${arg} HINTS ${path} NO_CMAKE_FIND_ROOT_PATH)
    if (NOT "${_mylib}" STREQUAL "_mylib-NOTFOUND")
      list(APPEND ${libs} ${_mylib})
    endif()
  endforeach()
  unset(_mylib CACHE)
endmacro()

macro(SET_LIBRARYS libs)
  foreach(lib  ${${libs}_RELEASE})
    list(APPEND ${libs} optimized)
    list(APPEND ${libs} ${lib})
  endforeach()
  foreach(lib ${${libs}_DEBUG})
    list(APPEND ${libs} debug)
    list(APPEND ${libs} ${lib})
  endforeach()
endmacro()

function(_get_library_branch branch)
  get_filename_component(libName ${CMAKE_PARENT_LIST_FILE} NAME_WE)
  #message("${libName}_BRANCH:${${libName}_BRANCH}")
  if("${${libName}_BRANCH}" STREQUAL "")
    set(${branch} "master" PARENT_SCOPE)
    return()
  endif()
  set(${branch} ${${libName}_BRANCH} PARENT_SCOPE)
endfunction()

macro(ENSURE_SUBMODULE rootDir)
  #cmake_path(GET ${rootDir} PARENT_PATH parentDir)
  get_filename_component(parentDir ${rootDir}/.. ABSOLUTE)
  get_filename_component(baseName ${rootDir} NAME)
  message("ENSURE_SUBMODULE:${rootDir} baseName:${baseName}")
  execute_process(COMMAND git submodule update ${baseName}
                  WORKING_DIRECTORY ${parentDir})
endmacro(ENSURE_SUBMODULE)

macro(ENSURE_MODULE_REPO rootDir repoAddress)
  #cmake_path(GET ${rootDir} PARENT_PATH parentDir)
  get_filename_component(parentDir ${rootDir}/.. ABSOLUTE)
  get_filename_component(baseName ${rootDir} NAME)
  _get_library_branch(branch)
  #message("ENSURE_MODULE:${rootDir} baseName:${baseName}")
  if(EXISTS ${rootDir}/.git/index)
    message("ENSURE_MODULE_UPDATE branch:${branch} ${repoAddress}")
    execute_process(COMMAND git fetch
                    WORKING_DIRECTORY ${rootDir})
    execute_process(COMMAND git reset --hard origin/${branch}
                    #COMMAND_ECHO STDOUT
                    WORKING_DIRECTORY ${rootDir})
  else()
    message("ENSURE_MODULE_CLONE branch:${branch} ${repoAddress}")
    execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory ${baseName}
                    #COMMAND_ECHO STDOUT
                    WORKING_DIRECTORY ${parentDir})
    execute_process(COMMAND git clone --branch ${branch} --depth=1 ${repoAddress} ${baseName}
                    #COMMAND_ECHO STDOUT
                    WORKING_DIRECTORY ${parentDir})
  endif()
endmacro(ENSURE_MODULE_REPO)

macro(ENSURE_MODULE rootDir)
  get_filename_component(baseName ${rootDir} NAME)
  ENSURE_MODULE_REPO(${rootDir} "https://git.huya.info/cpp-thirdparty/${baseName}.git")
endmacro(ENSURE_MODULE)

macro(CopyFile src dst makeDir)
  message("CopyFile ${src} to ${dst}")
  if(${makeDir})
    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${dst})
  endif()
  file(GLOB filelist ${src})
  #file(COPY ${filelist} NO_SOURCE_PERMISSIONS DESTINATION ${dst})
  foreach(srcFile ${filelist})
    execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${srcFile} ${dst})
  endforeach(srcFile)
  unset(filelist)
endmacro(CopyFile)

macro(CopyDir src dst)
  message("CopyDir ${src} to ${dst}")
  execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${src} ${dst})
endmacro(CopyDir)

macro(ENSURE_INSTALL rootDir)
 message("ENSURE_INSTALL:${rootDir}")
if(WIN32)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Release/*.dll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release true)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Release/*.pdb ${CMAKE_PDB_OUTPUT_DIRECTORY}/Release true)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Debug/*.dll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug true)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Debug/*.pdb ${CMAKE_PDB_OUTPUT_DIRECTORY}/Debug true)
elseif(ANDROID)
  if(ANDROID_ABI MATCHES "^armeabi(-v7a)?$")
    CopyFile(${rootDir}/lib/android/armeabi-v7a/*.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} true)
  elseif(ANDROID_ABI STREQUAL arm64-v8a)
    CopyFile(${rootDir}/lib/android/arm64-v8a/*.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} true)
  endif()
else()
  CopyFile(${rootDir}/lib/linux/*.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} true)
  CopyFile(${rootDir}/lib/linux/*.a ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} true)
endif()
endmacro(ENSURE_INSTALL)

macro(ENSURE_INSTALL_EXE rootDir)
 message("ENSURE_INSTALL:${rootDir}") 
if(WIN32)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Release/*.exe ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release true)
  CopyFile(${rootDir}/lib/${WINDOWS_PLATFORM}/Debug/*.exe ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug true)
endif()
endmacro(ENSURE_INSTALL_EXE)